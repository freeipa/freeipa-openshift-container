# FreeIPA server container

This repository contains Dockerfiles and associated assets for
building a FreeIPA server container images from the official yum/dnf
repositories.

Install docker 1.10+:

    yum install -y docker

Start the service:

    systemctl start docker

To build the image, run in the root of the repository:

    docker build -t freeipa-server .

The repository contains multiple `Dockerfile`s for various
operating systems. Use `-f` option to `docker build` to pick
different than default target.

Create directory which will hold the server data:

    mkdir /var/lib/ipa-data

On SELinux enabled systems,

    setsebool -P container_manage_cgroup 1

might be needed to enable running systemd in the containers.

On systems where oci-systemd-hook is available on the host, the
FreeIPA server container can be created with

    docker run --name freeipa-server-container -ti \
       -h ipa.example.test \
       --read-only \
       -v /var/lib/ipa-data:/data:Z freeipa-server [ opts ]

Without oci-systemd-hook, `/run`, `/tmp`, and `/sys/fs/cgroup`
need to be mounted explicitly:

    docker run --name freeipa-server-container -ti \
       -h ipa.example.test \
       -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
       --tmpfs /run --tmpfs /tmp \
       -v /var/lib/ipa-data:/data:Z freeipa-server [ opts ]

When running DNS server (the `--setup-dns` option to
`ipa-server-install`) in a container with read-only root filesystem
(the `--read-only` option to `docker run`), the setup code in the
container won't be able to edit `/etc/resolv.conf` in the container
to point it to itself. Add `--dns=127.0.0.1` option to the
`docker run` invocation to allow the FreeIPA server to reach its own
DNS server.

Also, without oci-systemd-hook, running the container as
`--read-only` will typically only work when `/etc/machine-id`
is pre-created on the host and bind-mounted to the container with `-v`.

The list of options [opts] can start with exit-on-finished to stop
the container after successfully configuring the server in the container
(useful for testing), or no-exit to keep the container running even
if the initial configuration fails (useful for debugging).

Standard `ipa-server-install` will be started and you can configure
the server. The `docker run` invocation also accepts command line
parameters that will be passed to `ipa-server-install`, so
unattended invocation is possible, for example with

    docker run --rm -e PASSWORD=Secret123 -h ipa.example.test --read-only \
        freeipa-server exit-on-finished -U -r EXAMPLE.TEST --no-ntp

To allow for unprivileged container operation, use the `docker run -h ...`
option to set the hostname for the FreeIPA server in the container.
If it's not possible to set the hostname for the container, specify it
with `IPA_SERVER_HOSTNAME` environment variable, for example with
`docker run -e IPA_SERVER_HOSTNAME=...`.
Do not use the `ipa-server-install --hostname ...` option.

Optionally, you can put into the directory mounted into /data
(/var/lib/ipa-data in this example) a file

    ipa-server-install-options

with command line parameters to ipa-server-install command,
for example

    --realm=EXAMPLE.TEST
    --ds-password=The-directory-server-password
    --admin-password=The-admin-password

and these options will also be used as parameters to `ipa-server-install`.

If you want to instruct the container to create a replica, specify the
command in the `docker run` parameters:

    docker run --name freeipa-server-container -ti \
       -h ipa.example.test \
       -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
       --tmpfs /run --tmpfs /tmp \
       -v /var/lib/ipa-data:/data:Z \
       freeipa-server ipa-replica-install [ opts ]

The options will be passed to `ipa-replica-install` in the container.
You can also put options to file

    ipa-replica-install-options

in the directory mounted to /data to this directory, for example with

    --password=The-directory-server-password
    --admin-password=The-admin-password

If your setup is of Domain Level < 1, GPG-encrypted replica information
file is also needed in the directory mounted to /data.

If the above commands fail with error about invalid value for
flag -v and bad format for volumes, run

    chcon -t svirt_sandbox_file_t /var/lib/ipa-data

or use semanage fcontext and restorecon, and use -v option
without the :Z part.

The option `--name` assigns the container a name that can be used
later with `docker start`, `docker stop` and other commands.
Command `ipa-server-install` is invoked non-interactively the first
time the container is run.

The `-ti` parameters are optional and are used for get a terminal,
for interactive configuration sessions.

The container can the be started and stopped:

    docker stop freeipa-server-container
    docker start -ai freeipa-server-container

If you want to use the FreeIPA server not just from the host
where it is running but from external machines as well, you
might want to use the `-p` options to make the services accessible
externally. You will then likely want to also specify the
`IPA_SERVER_IP` environment variable via the `-e` option to
define what IP address should the server put to DNS as its
address. Starting the server would then be

    docker run -e IPA_SERVER_IP=10.12.0.98 -p 53:53/udp -p 53:53 \
        -p 80:80 -p 443:443 -p 389:389 -p 636:636 -p 88:88 -p 464:464 \
	-p 88:88/udp -p 464:464/udp -p 123:123/udp ...

Note that an attempt of achieving this goal with the `--ip-address`
option of `ipa-server-install` command is likely to fail, and should
be avoided.

If you have existing container with data volume, it should be safe
to shut it down and run new one based on newer image, with the same
data directory bind-mounted to /data. The container will detect
that it is running with data produced by different image and attempt
to upgrade the configuration and data. Of course, keeping backup
of the data directory for cases when the upgrade process fails
is recommended.

# Configuring and running with atomic

On platforms with `atomic` command available, the container can be
configured with

    atomic install [ --name $THE_NAME ] freeipa-server \
	[ keywords for docker operation ] \
	[ ipa-server-install | ipa-replica-install ] \
	[ opts ]

The keywords for docker operations are:

    hostname $IPA_SERVER_HOSTNAME - docker run -h $IPA_SERVER_HOSTNAME
    net-host - docker run --net=host, also uses host's hostname
    publish - docker run -p 443:443 ... ; publish all ports of the IPA
              container on host's interfaces
    cap-add $CAPABILITY - docker run --cap-add=$CAPABILITY

The container will use /var/lib/$THE_NAME to store the configuration
and data. It the gets started with

    atomic run [ --name $THE_NAME ] freeipa-server

Version 1.12 of atomic is needed.

# IPA-enrolled client in Docker

There are multiple `*-client` branches named after OS they are
based on. Check out the branch you prefer and in the root of the
repository, run:

    docker build -t freeipa-client .

To run the client container, run it with correctly set DNS
and hostname in the IPA domain, or you can link it to the
freeipa-server container directly:

    docker run --privileged --link freeipa-server-container:ipa \
        -e PASSWORD=Secret123 -ti freeipa-client

The first time this container runs, it invokes `ipa-client-install`
with the given admin password.

# Debugging

The container scripts provide some options for debugging:

- Enable shell script tracing in both the top-level `init-data` script
  and the `ipa-server-configure-first` script by setting the
  `$DEBUG_TRACE` environment variable.

- Disable container exit after script failure by setting the
  `$DEBUG_NO_EXIT` environment variable.  After failure, the
  container will continue running, and can be entered for debugging
  with e.g. `docker exec -it freeipa-server-container bash`.

Example usage:

    docker run [...] -e DEBUG_TRACE=1 -e DEBUG_NO_EXIT=1 freeipa-server

You can also try to run

    tests/run-partial-tests.sh Dockerfile

or

    docker='sudo podman' tests/run-partial-tests.sh Dockerfile

which can uncover the general issues with running systemd in containers.

# Travis CI

To check the general health of the project, you can check
https://travis-ci.org/freeipa/freeipa-container/ where tests are run
for various OSes (in the container).

# Build and Push image helper script

A script to help on building and pushing the image has been created,
which can be used from the command line or in a pipeline. It offers a
default pattern to push the images (development images), and flexibility
to override the values using environment variables.

Usage:

```shell
./devel/build-and-push-image.sh
```

The environment variables available are:
- **BAPI_DOCKERFILE**: Indicate the Dockerfile to be used; by default it is
  'Dockerfile'.
- **BAPI_REMOTE_IMAGE**: The reference to the remote image, indicating the image
  registry.
- **BAPI_LOCAL_TAG**: Local reference to be used for the image.
- **BAPI_USERNAME**: The username to login in the remote image registry.
- **BAPI_PASSWORD**: The password to login in the remote image registry.

# Testing build with a repository generated from the PRCI at freeipa

You need to grab the hash where the object is stored from the PR CI
information, and afterward you can pass on the hash as environment
variable or writing that in the file `artifact-hash.txt`.

```shell
ARTIFACT_HASH="c8dbfc76-c4eb-11ea-88a6-fa163e90bd6d" ./devel/check-container-build-with-prci.sh
```

# License

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
